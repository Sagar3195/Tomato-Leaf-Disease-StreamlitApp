# -*- coding: utf-8 -*-
"""Tomatto-Leaf-Disease-Classification Using TransferLearning(InceptionV3)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/105rzUUtjM6BJzg45CdTsGykOW5owpS06
"""

###Importing required libraries

from tensorflow.keras.models import Model, Sequential
from tensorflow.keras.layers import Lambda, Flatten, Dense, Input
from tensorflow.keras.applications.inception_v3 import InceptionV3
from tensorflow.keras.applications.inception_v3 import preprocess_input
from tensorflow.keras.preprocessing.image import load_img, ImageDataGenerator
from tensorflow.keras.preprocessing import image
import numpy as np
from glob import glob

##Resizing all the images

IMAGE_SIZE = [224,224]

train_path = "/content/drive/MyDrive/Tomatto-Leaf-Disease/train"
test_path = "/content/drive/MyDrive/Tomatto-Leaf-Disease/valid"

##Here we are using Imagenets weights
inception = InceptionV3(input_shape= IMAGE_SIZE + [3], weights= 'imagenet', include_top= False)

##Here we don't train the existing weights
for layer in inception.layers:
  layer.trainable = False

##Let's see the number of output classes
folders = glob("/content/drive/MyDrive/Tomatto-Leaf-Disease/train/*")
folders

len(folders)

x = Flatten()(inception.output)

prediction = Dense(len(folders), activation= 'softmax')(x)

##Create the model 
model = Model(inputs = inception.input, outputs = prediction)

model.summary()

##now compile the model
model.compile(optimizer= 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])

from tensorflow.keras.preprocessing.image import ImageDataGenerator
train_datagen = ImageDataGenerator(rescale= 1./255, shear_range= 0.2, zoom_range= 0.2, horizontal_flip= True)
test_datagen = ImageDataGenerator(rescale = 1./255)

training_set = train_datagen.flow_from_directory("/content/drive/MyDrive/Tomatto-Leaf-Disease/train", target_size= (224,224), class_mode= 'categorical', batch_size = 32)

test_set = test_datagen.flow_from_directory("/content/drive/MyDrive/Tomatto-Leaf-Disease/valid", target_size= (224,224), class_mode='categorical', batch_size= 32)

##Now we train the model 
result = model.fit_generator(training_set, validation_data= test_set, epochs= 10, steps_per_epoch= len(training_set), validation_steps= len(test_set))

import matplotlib.pyplot as plt

plt.plot(result.history['loss'], label='train loss')
plt.plot(result.history['val_loss'], label='val loss')
plt.legend()
plt.show()
plt.savefig('LossVal_loss')

# plot the accuracy
plt.plot(result.history['accuracy'], label='train acc')
plt.plot(result.history['val_accuracy'], label='val acc')
plt.legend()
plt.show()
plt.savefig('AccVal_acc')

#now save the model as h5 file.
from tensorflow.keras.models import load_model
model.save('tomatto_model_inception.h5')

#now we load the model for predictions the dataset
model = load_model('tomatto_model_inception.h5')

img = image.load_img("/content/drive/MyDrive/Tomatto-Leaf-Disease/train/Tomato___Early_blight/00c5c908-fc25-4710-a109-db143da23112___RS_Erly.B 7778.JPG", target_size=(224, 224) )

x = image.img_to_array(img)

x = np.expand_dims(x, axis = 0)

img_data = preprocess_input(x)

model.predict(img_data)

classes = np.argmax(model.predict(img_data), axis = 1)

classes == 1



a== 1

